function [trialOutput] = categorizationExperiment(subjectName,exptdesign)try	% following codes should be used when you are getting key presses using	% fast routines like kbcheck.    KbName('UnifyKeyNames');	deleteKeyNum=KbName('delete');	escapeKeyNum=KbName('escape');	spaceKeyNum=KbName('space');	Priority(1)    	enterKeyNum=77; % for some unknown reason, KbName('enter') returns 53, which does not work on this setup...	endKeyNum=KbName('end');	escapeCharNum=27;		%settings so that Psychtoolbox doesn't display annoying warnings--DON'T CHANGE    oldLevel = Screen('Preference', 'VisualDebugLevel', 1);%     oldEnableFlag = Screen('Preference', 'SuppressAllWarnings', 1);%     warning off    HideCursor;    WaitSecs(1); % make sure it is loaded into memory;	tmp=GetSecs; % make sure it is loaded into memory;		% initialize the random number generator% 	randn('state',sum(100*clock));    rng('shuffle'); %phc 6/26/2015    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%		INITIALIZE EXPERIMENT%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    % open a screen and display instructions    % Choosing the display with the highest display number is    % a best guess about where you want the stimulus displayed.    screens=Screen('Screens');    screenNumber=0;    %screenNumber=max(screens);    % Open window with default settings:    [w windowRect] =Screen('OpenWindow', screenNumber,[128 128 128]);    white = WhiteIndex(w); % pixel value for white    gray = GrayIndex(w); % pixel value for gray    black = BlackIndex(w); % pixel value for black               %  calculate the center of the screen, for later reference    center = [(windowRect(3)-windowRect(1))/2 (windowRect(4)-windowRect(2))/2];    %  calculate the slack allowed during a flip interval       refresh = Screen('GetFlipInterval',w);    slack = refresh/2;    refresh            slack        % Select specific text font, style and size, unless we're on Linux    % where this combo is not available:    if IsLinux==0        Screen('TextFont',w, 'Courier New');        Screen('TextSize',w, 14);        Screen('TextStyle', w, 1+2);    end;        if exptdesign.netstationPresent        % Connect to Netstation         [status error] = NetStation('Connect', exptdesign.netstationIP)        if status ==1 % there was an error!             ME = MException('NETSTATION:CouldNotConnect', ['Could not connect to Netstation computer at IP ' exptdesign.netstationIP '.  Please check the IP and network connection and try again.\n  Error:' error]);             throw(ME);        end           	% Tell Netstation to synchronize recording        [status error] = NetStation('Synchronize',exptdesign.netstationSyncLimit);        if status ==1 % there was an error!             ME = MException('NETSTATION:CouldNotSync', ['Could not sync with Netstation to allowable limit of ' exptdesign.syncLimit '.  Please check the IP and connection and try again.\n  Error:' error]);             throw(ME);        end    end    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%		INTRO EXPERIMENT%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    % Now horizontally and vertically centered:   % drawAndCenterText(w,'Press any key to start experiment...');    drawAndCenterText(w,'Loading Images, please wait...',0);        % cache the files that are needed    line1files = dir(exptdesign.line1files);    line2files = dir(exptdesign.line2files);    line3files = dir(exptdesign.line3files);    line4files = dir(exptdesign.line4files);        labelFiles=dir(exptdesign.labelImages);    %     line1images = loadimages(exptdesign.imageDirectory, line1files(1:length(line1files)));%     line2images = loadimages(exptdesign.imageDirectory, line2files(1:length(line2files)));%     line3images = loadimages(exptdesign.imageDirectory, line3files(1:length(line3files)));%     line4images = loadimages(exptdesign.imageDirectory, line4files(1:length(line4files)));%     labelimages = loadimages(exptdesign.imageDirectory, labelFiles(1:2));load('categorizationImages.mat')                %  Put all the trial types in one vector and permute it    %    permutation1 = randperm(240);        permutation1=randperm(840);        permutation2=randperm(840);               clear stimulus1typemarker stimulus2typemarker condition line images imagesM0 imagesM3w imagesM3b imagesM6 imagesSingle                          line = cat(2, ones(1,210), ones(1,210).*2, ones(1,210).*3, ones(1,210).*4);        line=line(permutation1);        images = cat(2, 1:210, 1:210, 1:210, 1:210);        images=images(permutation1);        %make stimulustypemarker        %for second stimulus in each pair of stimuli, be sure to add 20                condition = ([ones(1,420) ones(1,420).*2]);        condition=condition(permutation2);                        %%Now we need 160 trials -->Two permutations           % %         stimulus1typemarkerThisBlock = [stimulus1typemarker(permutation1)];% %         stimulus2typemarkerThisBlock = [stimulus2typemarker(permutation1)];% %         conditionThisBlock = [condition(permutation1)];% %         lineThisBlock =  [line(permutation1)];% %         imagesThisBlock = [images(:,permutation1)];        clear allimagefiles;        clear allimages;                allimagefiles(1,1:210,1) = line1files(1:210,1);        allimagefiles(2,1:210,1) = line2files(1:210,1);        allimagefiles(3,1:210,1) = line3files(1:210,1);        allimagefiles(4,1:210,1) = line4files(1:210,1);                allimages(1,1:210,:,:) = line1images(1:210,:,:);        allimages(2,1:210,:,:) = line2images(1:210,:,:);        allimages(3,1:210,:,:) = line3images(1:210,:,:);        allimages(4,1:210,:,:) = line4images(1:210,:,:);% %     allimagefiles(1,1:2,1) = line1files(1:2,1);% %         allimagefiles(2,1:2,1) = line2files(1:2,1);% %         allimagefiles(3,1:2,1) = line3files(1:2,1);% %         allimagefiles(4,1:2,1) = line4files(1:2,1);% % % %         % %         allimages(1,1:2,:,:) = line1images(1:2,:,:);% %         allimages(2,1:2,:,:) = line2images(1:2,:,:);% %         allimages(3,1:2,:,:) = line3images(1:2,:,:);% %         allimages(4,1:2,:,:) = line4images(1:2,:,:);                %         allimagefiles(:,1) = targetfiles(1:exptdesign.numTargetsPerSession,1);%         allimagefiles(exptdesign.numTargetsPerSession+1:exptdesign.numTargetsPerSession+exptdesign.numDistractorsPerSession,1) = distractorfiles(1:exptdesign.numDistractorsPerSession,1);%         allimagefiles = allimagefiles(permutation,1);%       %         allimages(:,:,:) = targetimages(:,:,:);%         allimages(exptdesign.numTargetsPerSession+1:exptdesign.numTargetsPerSession+exptdesign.numDistractorsPerSession,:,:) = distractorimages(:,:,:);%         allimages = allimages(permutation,:,:);              %  MASKS    %    maskimagefiles = maskimagefiles(randperm(size(maskimagefiles,1)));    %    maskimages = loadimages(exptdesign.imageDirectory,maskimagefiles(1:exptdesign.numTrialsPerSession));                %  FIXATION IMAGE        fixationimage = imread(exptdesign.fixationImage);%         %  BLANK IMAGE        blankimage = imread(exptdesign.blankImage);        size(blankimage)                        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%        %		SESSIONS         %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    for sessionNum=1:exptdesign.numSessions        tic;        drawAndCenterText(w,'Setting up session, please wait...',0);                        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%        %		TRIALS        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%        %  Set up the output data structure for all trials in this session        trialOutput(sessionNum).sessionNum = sessionNum;        disp('Finished setting up session :');        toc;        drawAndCenterText(w,'Finished setting up session (press key to begin)...');                                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%        %       Draw "Press button when you see SOVOR/ZUPUD        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%                    drawAndCenterText(w,'INSTRUCTIONS: \n View each image. \n Indicate correct image label with left or right arrow key. \n Push any key when you are ready to begin. ');                          % Tell Netstation to start recording        if exptdesign.netstationPresent            [status error] = NetStation('StartRecording');            if status ==1 % there was an error!                status                error                 ME = MException('NETSTATION:CouldNotRecord', ['Could not tell Netstation to start recording.  Please check the IP and connection and try again.\n  Error:' error]);                 throw(ME);            end            %  Wait for Netstation to Start Recording            WaitSecs(2);        end        % %         drawAndCenterText(w,'Please hold still for 5 seconds...',0);% %         pause(5)% %         drawAndCenterText(w,'Press a key to begin',1);        %         if exptdesign.randomizeMaskPresentation % %             useMask = ceil(2* rand(1)) - 1;            %             useMask = mod(sessionNum-1,2);%         end                    %  Go through all trials for this session        for trial=1:exptdesign.numTrialsPerSession                        imageNumber=trial+(140.*(sessionNum-1));            %  Choose the SOA interval for this trial            %numSOAs = size(exptdesign.soaDurations,2);            %isiDuration = exptdesign.isiDuration;            %soaDuration = exptdesign.soaDurations(ceil(numSOAs*rand(1)));                        %  Make all of the textures and data needed for this trial            %mytext =['Please rate the visibility of the picture just presented.\n \n 1.  I did not see the picture. \n 2. I do not think I saw the picture. \n 3. I think I saw something. \n 4. I saw the picture.'];                        fixationTexture=Screen('MakeTexture', w, double(fixationimage));            blankTexture=Screen('MakeTexture', w, double(blankimage));            stimulusTexture=Screen('MakeTexture', w, squeeze(allimages(line(imageNumber),images(imageNumber),:,:)));                        mask=scramble(squeeze(allimages(line(imageNumber),images(imageNumber),:,:)));                        maskTexture=Screen('MakeTexture', w, mask);                        labelTexture=Screen('MakeTexture', w, squeeze(labelimages(condition(imageNumber),:,1:640)));% %             if (useMask)% %                 maskTexture=Screen('MakeTexture', w, squeeze(maskimages(trial,:,:)));                % %             else% %                 maskTexture=Screen('MakeTexture', w, double(blankimage));% %             end                        %  Set up the trial output data            %trialOutput(sessionNum).trials(trial).category = category;            trialOutput(sessionNum).trials(trial).sessionIndex = sessionNum;            trialOutput(sessionNum).trials(trial).trialIndex = trial;            trialOutput(sessionNum).trials(trial).imagefile = allimagefiles(line(imageNumber),images(1,imageNumber),1);            trialOutput(sessionNum).trials(trial).line=line(imageNumber);            trialOutput(sessionNum).trials(trial).images=images(imageNumber);                         %trialOutput(sessionNum).trials(trial).imagefile2 = allimagefiles(lineThisBlock(trial),imagesThisBlock(2,trial),1);            trialOutput(sessionNum).trials(trial).condition = condition(imageNumber);                       trialOutput(sessionNum).trials(trial).trialStartTime=GetSecs;    % %             if stimulus1typemarkerThisBlock(trial) < 3% %                 trialOutput(sessionNum).trials(trial).correctResponse=1; % %             elseif stimulus1typemarkerThisBlock(trial) ==5% %                 trialOutput(sessionNum).trials(trial).correctResponse=0;% %             else% %                 trialOutput(sessionNum).trials(trial).correctResponse=2;% %             end                         % intertrial variation 200-700 ms            interTrialDuration = (ceil(500* rand(1)) + 200) / 1000;%            interTrialDuration = (ceil(500* rand(1)) + 500) / 1000;            %display each thing for the duration desired. then record each            %point of interest.            Screen('DrawTexture', w, fixationTexture);                  [a b c d]=Screen('Flip',w);            Screen('DrawTexture', w, stimulusTexture);            [a b c d]=Screen('Flip', w, a+exptdesign.fixationDuration - slack);            Screen('DrawTexture', w, maskTexture);            [a b c d]=Screen('Flip', w, a+exptdesign.stimulusDuration - slack);            Screen('DrawTexture', w, labelTexture);            [a b c d]=Screen('Flip', w, a+exptdesign.maskDuration - slack);           AnimalResponseStartTime = GetSecs;                                 if exptdesign.waitForResponse                numericalanswer = getAnimalResponseWait();            else                numericalanswer = getAnimalResponse(exptdesign.responseDuration);            end            AnimalResponseFinishedTime = GetSecs;%             disp(['Translated animal response keyboard input to ' num2str(numericalanswer)]);            trialOutput(sessionNum).trials(trial).subjectAnimalResponse = numericalanswer;           trialOutput(sessionNum).trials(trial).AnimalResponseFinish=AnimalResponseFinishedTime;           trialOutput(sessionNum).trials(trial).AnimalResponseStart=AnimalResponseStartTime;                                 %  Record the end time for the trial            trialOutput(sessionNum).trials(trial).trialEndTime= GetSecs;                                    %  Send trial specific events to Netstation for recording (if            %  present)            %  STIM = Stimulus            %  DIST = Distractor            if exptdesign.netstationPresent                trialDuration = trialOutput(sessionNum).trials(trial).trialStartTime - trialOutput(sessionNum).trials(trial).trialEndTime;                if  trialOutput(sessionNum).trials(trial).correctResponse == 1%                     Netstation('Event','STIM',trialOutput(sessionNum).trials(trial).trialStartTime,0.001,'sess',num2str(sessionNum), 'tria',num2str(trial),'soad',num2str(soaDuration));                    NetStation('Event','SAME',GetSecs,0.001,'sess',sessionNum, 'tria',trial,'cond',conditionThisBlock(trial), 'resp', numericalanswer, 'line', line(trial));                else                    NetStation('Event','DIFF',GetSecs,0.001,'sess',sessionNum, 'tria',trial,'cond',conditionThisBlock(trial), 'resp', numericalanswer, 'line', line(trial));                end            end            %  Record whether the subject got the right answer            %trialOutput(sessionNum).trials(trial).subjectHasRightAnswer = trialOutput(sessionNum).trials(trial).correctResponse == trialOutput(sessionNum).trials(trial).subjectAnimalResponse;                        %  Record the filenames used for stimulus and masks            %%%%%%%%trialOutput(sessionNum).trials(trial).stimulus1ImageFile = allimagefiles1(trial).name;            %%%%%%%%trialOutput(sessionNum).trials(trial).stimulus2ImageFile = allimagefiles2(trial).name;%            trialOutput(sessionNum).trials(trial).maskImageFile = maskimagefiles(trial).name;%            trialOutput(sessionNum).trials(trial).maskUsed = useMask;                                            %  Close all open textures            Screen('Close', fixationTexture);             Screen('Close', blankTexture);                %    Screen('Close', maskTexture);                         end        % %         drawAndCenterText(w,'Please hold still for 5 seconds...',0);% %         pause(5)                if exptdesign.netstationPresent            %  Tell Netstation to Stop Recording            [status error] = NetStation('StopRecording');            if status ==1 % there was an error!                status                 error                 ME = MException('NETSTATION:CouldNotStopRecording', ['Could not tell Netstation to stop recording.  Please check the IP and connection and try again.\n  Error:' error]);                 throw(ME);            end        end        %  Write the trial specific data to the output file.        tic;        save([subjectName '.' num2str(sessionNum)'.' num2str(trial) '.mat'],'trialOutput','exptdesign');        toc;        %  Display a short break message        if ( sessionNum < exptdesign.numSessions)            drawAndCenterText(w,['End of Session #' num2str(sessionNum) '.\n\n Please take a short break.\n  Then press any key to continue.']);        else            drawAndCenterText(w,['End of Session #' num2str(sessionNum) '.\n\n Thank you for participating!\n  Press any key to end the experiment.']);        end                end        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%		END%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    % End of demo, close window:    Screen('CloseAll');    Priority(0);    % At the end of your code, it is a good idea to restore the old level.%     Screen('Preference','SuppressAllWarnings',oldEnableFlag);        catch    % This "catch" section executes in case of an error in the "try"    % section []%      if exptdesign.netstationPresent%         % Tell Netstation to stop recording%         [status error] = NetStation('StopRecording');%         if status ==1 % there was an error!%             status %             error%              ME = MException('NETSTATION:CouldNotStopRecord', ['Could not tell Netstation to stop recording.  Please check the IP and connection and try again.\n  Error:' error]);% %              throw(ME);%             disp('ERROR stopping recoring in Netstation!');%         end%         %         [status error] = NetStation('Disconnect');%         if status ==1 % there was an error!%             status %             error%              ME = MException('NETSTATION:CouldNotStopRecord', ['Could not tell Netstation to stop recording.  Please check the IP and connection and try again.\n  Error:' error]);% %              throw(ME);%             disp('ERROR disconnecting from Netstation!');% %         end%     end    % above.  Importantly, it closes the onscreen window if it's open.%     disp('Caught error and closing experiment nicely....');%     Screen('CloseAll');%     Priority(0);%     fclose('all');%     psychrethrow(psychlasterror);end						endfunction numericalanswer = getAnimalResponseMouseWait()       [x,y,buttons] = GetMouse();       while (~buttons(1) && ~buttons(2))           [x,y,buttons] = GetMouse();       end       if buttons(1)           numericalanswer = 1;       elseif buttons(3)           numericalanswer = 2;       else           numericalanswer = 0;       endendfunction numericalanswer = getAnimalResponseWait()        numericalanswer = -1;        while numericalanswer == -1            [secs, keyCode] = KbPressWait;            numericalanswer = translateKeyAnimalResponse(keyCode);        endend   function numericalanswer = getAnimalResponseMouse(waitTime)  %Wait for a response  numericalanswer = -1;  mousePressed = 0;  startWaiting=GetSecs;  while GetSecs-startWaiting < waitTime && mousePressed == 0      %check to see if a button is pressed       [x,y,buttons] = GetMouse();       if (~buttons(1) && ~buttons(3))           continue;       else           if buttons(1)               numericalanswer = 1;           elseif buttons(3)               numericalanswer = 2;           else               numericalanswer = 0;           end          if numericalanswer ~= -1              %stop checking for a button press              mousePressed = 1;          end       end  end  if numericalanswer == -1      numericalanswer =0;  endendfunction numericalanswer = getAnimalResponse(waitTime)     %Wait for a response    numericalanswer = -1;    keyPressed = 0;    startWaiting=GetSecs;    while GetSecs-startWaiting < waitTime && keyPressed == 0        %check to see if a button is pressed        [keyDown,secs,keyCode] = KbCheck;                %program accepts only RightArrow, LeftArrow and space as subject responses        if keyPressed == 0 && keyDown             numericalanswer = translateKeyAnimalResponse(keyCode);            if numericalanswer ~= -1                %stop checking for a button press                keyPressed = 1;            end        end    end    if numericalanswer == -1        numericalanswer =0;    endendfunction numericalanswer = getRatingResponseWait()        numericalanswer = -1;        while numericalanswer == -1            [secs, keyCode] = KbPressWait;            numericalanswer = translateKeyRatingResponse(keyCode);        endend        function numericalanswer = getRatingResponse(waitTime)     %Wait for a response    numericalanswer = -1;    keyPressed = 0;    startWaiting=GetSecs;    while GetSecs-startWaiting < waitTime && keyPressed == 0        %check to see if a button is pressed        [keyDown,secs,keyCode] = KbCheck;                %program accepts only RightArrow, LeftArrow and space as subject responses        if keyPressed == 0 && keyDown             numericalanswer = translateKeyRatingReponse(keyCode);            if numericalanswer ~= -1                %stop checking for a button press                keyPressed = 1;            end        end    endendfunction [number] = translateKeyAnimalResponse(keyCode)    keyName = KbName(keyCode);%         disp(['Pressed key ' keyName]);    if strcmp(keyName,'LeftArrow') || strcmp(keyName,'KP_Left')        number = 1;    elseif strcmp(keyName,'RightArrow') || strcmp(keyName,'KP_Right')        number = 2;    else        number = -1;    end        return;% You pressed key 101 which is LeftArrow% You pressed key 103 which is RightArrow% You pressed key 84 which is KP_Left% You pressed key 86 which is KP_Rightendfunction [number] = translateKeyRatingResponse(keyCode)    keyName = KbName(keyCode);%         disp(['Pressed key ' keyName]);    if strcmp(keyName,'KP_End') || strcmp(keyName,'1')        number = 1;    elseif strcmp(keyName,'KP_Down') || strcmp(keyName,'2')        number = 2;	elseif strcmp(keyName,'KP_Next') || strcmp(keyName,'3')    	number = 3;	elseif strcmp(keyName,'KP_Left') || strcmp(keyName,'4')        number = 4;    else         number = -1;	end    return;%             key 88 which is KP_End  = 1 key%             key 89 which is KP_Down = 2 key%             key 90 which is KP_Next = 3 key%             key 84 which is KP_Left = 4 key%             key 11 which is 1 key%             key 12 which is 2 key%             key 13 which is 3 key%             key 14 which is 4 keyendfunction [images] = loadimages(directory,filenames)     total = size(filenames,1);    for i=1:total        [value map] = imread([directory, filenames(i).name],'JPG');        images(i,:,:) = value(:,:);    endendfunction [images] = loadimagesscale(directory,filenames,scaleval)     total = size(filenames,1);    if nargin < 3 || scaleval <= 0        dotheresize = 0;    else        dotheresize = 1;    end        for i=1:total%         disp(['Loading image: ' directory filenames(i).name]);        [value map] = imread([directory, filenames(i).name],'BMP');        value = ind2gray(value,map);%         size(value)        if (dotheresize)            value = imresize(value,scaleval);        end        images(i,:,:) = value(:,:);    endendfunction drawAndCenterText(window,message,wait)    if nargin < 3        wait = 1;    end        % Now horizontally and vertically centered:    [nx, ny, bbox] = DrawFormattedText(window, message, 'center', 'center', 0);    black = BlackIndex(window); % pixel value for black    %    Screen('FillRect',window,black,[0 0 32 32]);  % This is the stimulus marker block for the photodiode                    Screen('Flip',window);%     KbWait;%     while KbCheck; end;    if wait        KbPressWait    endendfunction writeExperimentParameters()    if exist(filename,'file') ~= 2		% names		fwid = fopen(filename,'a+');					savecomment(fwid,['Data File Name: ',filename]);		savecomment(fwid,'face phase experiment');		savecomment(fwid,['image names: ',strcat(names{1:end})]);		savecommand(fwid,'usenewcliprandn = 1;');		savecommand(fwid,vars2str(name));		savecommand(fwid,vars2str(calfile));		savecommand(fwid,vars2str(calfolder));				% noise levels		savecommand(fwid,vars2str(noiselevel));		savecommand(fwid,vars2str(clockseed));				% stimulus parameters		savecommand(fwid,vars2str(numstim));		savecommand(fwid,vars2str(numstim));		savecommand(fwid,vars2str(showstim));		% 		savecommand(fwid,vars2str(exptdesign.decileConditions));		% 		savecommand(fwid,vars2str(exptdesign.infoIncrement));		% 		savecommand(fwid,vars2str(exptdesign.phaseamp));		savecommand(fwid,vars2str(exptdesign.coherence));		savecommand(fwid,vars2str(exptdesign.stimduration));		savecommand(fwid,vars2str(exptdesign.numtrials));		savecommand(fwid,vars2str(exptdesign.numpracticetrials));				savecommand(fwid,vars2str(exptdesign.intertrialinterval));		savecommand(fwid,vars2str(exptdesign.aftertrialinterval));		savecommand(fwid,vars2str(exptdesign.postfixationpoint));		savecommand(fwid,vars2str(exptdesign.postfixationrandominc));		savecommand(fwid,vars2str(exptdesign.adaptseconds));		savecommand(fwid,vars2str(exptdesign.stimcontrastvariance));		savecommand(fwid,vars2str(stimfile));		savecommand(fwid,vars2str(stimtype));		savecommand(fwid,vars2str(calfile));		savecommand(fwid,vars2str(polarity));		savecommand(fwid,vars2str(rotation));		savecommand(fwid,vars2str(stimsize));		savecommand(fwid,vars2str(screensz));		savecommand(fwid,vars2str(res));				savecommand(fwid,vars2str(framert));		savecommand(fwid,vars2str(stimframes));		savecommand(fwid,vars2str(thumbsz));		savecommand(fwid,vars2str(clipsd));		savecommand(fwid,vars2str(contrast));		savecommand(fwid,vars2str(botpedestal));				% procedural parameters		savecommand(fwid,vars2str(numsessions));		savecommand(fwid,vars2str(source));		savecommand(fwid,vars2str(keysz));		savecommand(fwid,vars2str(usekeys));		savecommand(fwid,vars2str(keys));		savecommand(fwid,vars2str(feedback));		savecommand(fwid,vars2str(darktime));		savecommand(fwid,vars2str(maxtrials));		savecommand(fwid,vars2str(mainscrs));				% tags for data columns		% 		savecommand(fwid,'trial = 1; sequence = 2; response = 3; correct = 4; id = 5; coherence = 6; condition = 7; rt = 8; randnstate1 = 9; randnstate2 = 10;');		savecommand(fwid,'trial = 1; sequence = 2; response = 3; correct = 4; id = 5; coherence = 6; variance = 7; skewness = 8; kurtosis = 9; rt = 10; randnstate1 = 11; randnstate2 = 12;');		% date and time		savedatetime(fwid);			else		fwid = fopen(filename,'a+');		savedatetime(fwid);		eval(['load ',sourcename]);		    endendfunction out = scramble(img)sz = size(img);%only consider pixels in a frame where object ispixsum = sum(img,1);mx = max(find(pixsum>0,1,'first')-10,1);Mx = min(find(pixsum>0,1,'last')+10,sz(2));pixsum = sum(img,2);% my = max(find(pixsum>0,1,'first')-10,1);% My = min(find(pixsum>0,1,'last')+10,sz(1));my = max(find(pixsum>0,1,'first')-10,105);My = min(find(pixsum>0,1,'last')+10,210);szx = Mx-mx+1;szy = My-my+1;inds = randperm(szx*szy);out = reshape(img(my:My,mx:Mx),1,szy*szx);out = out(inds);out = reshape(out,szy,szx);img(my:My,mx:Mx) = out;out = img;end